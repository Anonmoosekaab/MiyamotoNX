# Tests for the TPL module

import unittest
import TPL

class KnownInputTest(unittest.TestCase):
	"""
	Tests that the algorithms function correctly with known input
	"""
	def setUp(self):
		self.CorrectInput_I4Decoder = {
			bytes([0x00,]): bytes([0xFF, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00]), # Low values
			bytes([0x01,]): bytes([0xFF, 0x00, 0x00, 0x00, 0xFF, 0x11, 0x11, 0x11]),
			bytes([0x10,]): bytes([0xFF, 0x11, 0x11, 0x11, 0xFF, 0x00, 0x00, 0x00]),
			bytes([0x11,]): bytes([0xFF, 0x11, 0x11, 0x11, 0xFF, 0x11, 0x11, 0x11]),
			bytes([0x02,]): bytes([0xFF, 0x00, 0x00, 0x00, 0xFF, 0x22, 0x22, 0x22]),
			bytes([0x20,]): bytes([0xFF, 0x22, 0x22, 0x22, 0xFF, 0x00, 0x00, 0x00]),
			bytes([0x22,]): bytes([0xFF, 0x22, 0x22, 0x22, 0xFF, 0x22, 0x22, 0x22]),
			bytes([0x12,]): bytes([0xFF, 0x11, 0x11, 0x11, 0xFF, 0x22, 0x22, 0x22]),
			bytes([0x21,]): bytes([0xFF, 0x22, 0x22, 0x22, 0xFF, 0x11, 0x11, 0x11]),

			bytes([0x33,]): bytes([0xFF, 0x33, 0x33, 0x33, 0xFF, 0x33, 0x33, 0x33]), # Repeated values not tested elsewhere
			bytes([0x44,]): bytes([0xFF, 0x44, 0x44, 0x44, 0xFF, 0x44, 0x44, 0x44]),
			bytes([0x55,]): bytes([0xFF, 0x55, 0x55, 0x55, 0xFF, 0x55, 0x55, 0x55]),
			bytes([0x66,]): bytes([0xFF, 0x66, 0x66, 0x66, 0xFF, 0x66, 0x66, 0x66]),
			bytes([0x77,]): bytes([0xFF, 0x77, 0x77, 0x77, 0xFF, 0x77, 0x77, 0x77]),
			bytes([0x88,]): bytes([0xFF, 0x88, 0x88, 0x88, 0xFF, 0x88, 0x88, 0x88]),
			bytes([0x99,]): bytes([0xFF, 0x99, 0x99, 0x99, 0xFF, 0x99, 0x99, 0x99]),
			bytes([0xAA,]): bytes([0xFF, 0xAA, 0xAA, 0xAA, 0xFF, 0xAA, 0xAA, 0xAA]),
			bytes([0xBB,]): bytes([0xFF, 0xBB, 0xBB, 0xBB, 0xFF, 0xBB, 0xBB, 0xBB]),
			bytes([0xCC,]): bytes([0xFF, 0xCC, 0xCC, 0xCC, 0xFF, 0xCC, 0xCC, 0xCC]),

			bytes([0x18,]): bytes([0xFF, 0x11, 0x11, 0x11, 0xFF, 0x88, 0x88, 0x88]), # Some random values
            bytes([0x24,]): bytes([0xFF, 0x22, 0x22, 0x22, 0xFF, 0x44, 0x44, 0x44]),
            bytes([0x2E,]): bytes([0xFF, 0x22, 0x22, 0x22, 0xFF, 0xEE, 0xEE, 0xEE]),
            bytes([0x4D,]): bytes([0xFF, 0x44, 0x44, 0x44, 0xFF, 0xDD, 0xDD, 0xDD]),
            bytes([0x4F,]): bytes([0xFF, 0x44, 0x44, 0x44, 0xFF, 0xFF, 0xFF, 0xFF]),
            bytes([0x51,]): bytes([0xFF, 0x55, 0x55, 0x55, 0xFF, 0x11, 0x11, 0x11]),
            bytes([0x59,]): bytes([0xFF, 0x55, 0x55, 0x55, 0xFF, 0x99, 0x99, 0x99]),
            bytes([0x62,]): bytes([0xFF, 0x66, 0x66, 0x66, 0xFF, 0x22, 0x22, 0x22]),
            bytes([0x78,]): bytes([0xFF, 0x77, 0x77, 0x77, 0xFF, 0x88, 0x88, 0x88]),
            bytes([0x79,]): bytes([0xFF, 0x77, 0x77, 0x77, 0xFF, 0x99, 0x99, 0x99]),
            bytes([0x88,]): bytes([0xFF, 0x88, 0x88, 0x88, 0xFF, 0x88, 0x88, 0x88]),
            bytes([0x94,]): bytes([0xFF, 0x99, 0x99, 0x99, 0xFF, 0x44, 0x44, 0x44]),
            bytes([0x95,]): bytes([0xFF, 0x99, 0x99, 0x99, 0xFF, 0x55, 0x55, 0x55]),
            bytes([0xAC,]): bytes([0xFF, 0xAA, 0xAA, 0xAA, 0xFF, 0xCC, 0xCC, 0xCC]),
            bytes([0xAE,]): bytes([0xFF, 0xAA, 0xAA, 0xAA, 0xFF, 0xEE, 0xEE, 0xEE]),
            bytes([0xB5,]): bytes([0xFF, 0xBB, 0xBB, 0xBB, 0xFF, 0x55, 0x55, 0x55]),
            bytes([0xBA,]): bytes([0xFF, 0xBB, 0xBB, 0xBB, 0xFF, 0xAA, 0xAA, 0xAA]),
            bytes([0xD5,]): bytes([0xFF, 0xDD, 0xDD, 0xDD, 0xFF, 0x55, 0x55, 0x55]),
            bytes([0xE7,]): bytes([0xFF, 0xEE, 0xEE, 0xEE, 0xFF, 0x77, 0x77, 0x77]),
            bytes([0xEC,]): bytes([0xFF, 0xEE, 0xEE, 0xEE, 0xFF, 0xCC, 0xCC, 0xCC]),

			bytes([0xDD,]): bytes([0xFF, 0xDD, 0xDD, 0xDD, 0xFF, 0xDD, 0xDD, 0xDD]), # High values
			bytes([0xDF,]): bytes([0xFF, 0xDD, 0xDD, 0xDD, 0xFF, 0xFF, 0xFF, 0xFF]),
			bytes([0xFD,]): bytes([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDD, 0xDD, 0xDD]),
			bytes([0xEE,]): bytes([0xFF, 0xEE, 0xEE, 0xEE, 0xFF, 0xEE, 0xEE, 0xEE]),
			bytes([0xEF,]): bytes([0xFF, 0xEE, 0xEE, 0xEE, 0xFF, 0xFF, 0xFF, 0xFF]),
			bytes([0xFE,]): bytes([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEE, 0xEE, 0xEE]),
			bytes([0xFF,]): bytes([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]),
			}

	def test_KnownInput_I4Decoder(self):
		for test_input, test_output in self.CorrectInput_I4Decoder.items():
			decoder = TPL.I4Decoder(test_input, 1, 1)
			decoder.run()
			self.assertEqual(decoder.result, test_output)

if __name__ == '__main__':
	unittest.main()